/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>

&lt {
    require-prior-idle-ms = <150>;
    tapping-term-ms = <280>;
    quick-tap-ms = <250>;
    flavor = "balanced";
};

&mt {
    require-prior-idle-ms = <150>;
    tapping-term-ms = <280>;
    quick-tap-ms = <250>;
    flavor = "balanced";
};

/ {
    behaviors {
        gresc: grave_escape {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp ESC>, <&kp GRAVE>;

            mods = <(MOD_LGUI|MOD_LSFT|MOD_RGUI|MOD_RSFT)>;
        };

        bspdel: bspace_del {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp BSPC>, <&kp DEL>;

            mods = <(MOD_LGUI|MOD_LSFT|MOD_RGUI|MOD_RSFT)>;
        };

        lt_bspdel: layer_tap_bspc_del {
            compatible = "zmk,behavior-hold-tap";
            label = "LAYER_TAP_BACKSPACE_DELETE";
            #binding-cells = <2>;
            bindings = <&mo>, <&bspdel>;

            quick-tap-ms = <200>;
            tapping-term-ms = <225>;
        };

        lh: home_row_left_mod_tap {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            require-prior-idle-ms = <150>;
            tapping-term-ms = <280>;
            quick-tap-ms = <250>;
            bindings = <&kp>, <&kp>;

            hold-trigger-key-positions = <30 31 32 33 34 43 55 44 45 18 19 20 21 23 22 11 10 9 8 7 6 46 47 48 54 56 57 49 35>;
            hold-trigger-on-release;
        };

        rh: home_row_right_mod_tap {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            require-prior-idle-ms = <150>;
            tapping-term-ms = <280>;
            quick-tap-ms = <250>;
            bindings = <&kp>, <&kp>;

            hold-trigger-key-positions = <25 26 27 28 29 12 13 15 14 16 17 5 4 2 3 1 0 37 38 39 40 41 42 53 52 51 50 24 36>;
            hold-trigger-on-release;
        };

        td_lctrl_quote: td_lctrl_quote {
            compatible = "zmk,behavior-tap-dance";
            label = "DT_GUI_ENTER";
            #binding-cells = <0>;
            bindings = <&mt LEFT_CONTROL SINGLE_QUOTE>, <&kp DOUBLE_QUOTES>;
        };

        td_alt_brckt_bslsh: td_alt_brckt_bslsh {
            compatible = "zmk,behavior-tap-dance";
            label = "TD_ALT_BRCKT_BSLSH";
            #binding-cells = <0>;
            bindings =
                <&mt LEFT_ALT LEFT_BRACKET>,
                <&kp RIGHT_BRACKET>,
                <&kp BACKSLASH>;
        };

        td_alt_minus_grave_esc: td_alt_minus_grave_esc {
            compatible = "zmk,behavior-tap-dance";
            label = "TD_ALT_MINUS_GRAVE_ESC";
            #binding-cells = <0>;
            bindings = <&mt LEFT_ALT MINUS>, <&kp GRAVE>, <&kp ESCAPE>;
        };

        lhmini: lhmini {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            require-prior-idle-ms = <150>;
            tapping-term-ms = <280>;
            quick-tap-ms = <250>;
            bindings = <&kp>, <&kp>;

            hold-trigger-key-positions = <48 35>;
            hold-trigger-on-release;
            label = "LHMINI";
        };

        rhmini: rhmini {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            require-prior-idle-ms = <150>;
            tapping-term-ms = <280>;
            quick-tap-ms = <250>;
            bindings = <&kp>, <&kp>;

            hold-trigger-key-positions = <37 24>;
            hold-trigger-on-release;
            label = "RHMINI";
        };
    };
};

/ {
    combos {
        compatible = "zmk,combos";

        thumbesc {
            bindings = <&kp ESCAPE>;
            key-positions = <54 53>;
            timeout-ms = <150>;
        };

        bootloader {
            bindings = <&bootloader>;
            key-positions = <16 15 17 41>;
        };

        capsword {
            bindings = <&caps_word>;
            key-positions = <28 31>;
        };

        capslock {
            bindings = <&kp CAPS>;
            key-positions = <28 27 31 32>;
        };

        esc_gh {
            bindings = <&kp ESCAPE>;
            key-positions = <29 30>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            // ------------------------------------------------------------------------------------------------------------
            // |  ESC  |  1  |  2  |  3   |  4   |  5   |                   |  6   |  7    |  8    |  9   |   0   |   `   |
            // |  TAB  |  Q  |  W  |  E   |  R   |  T   |                   |  Y   |  U    |  I    |  O   |   P   |   -   |
            // |  CTRL |  A  |  S  |  D   |  F   |  G   |                   |  H   |  J    |  K    |  L   |   ;   |   '   |
            // | SHIFT |  Z  |  X  |  C   |  V   |  B   |   "["  |  |  "]"  |  N   |  M    |  ,    |  .   |   /   | SHIFT |
            //                     | ALT  | GUI  | LOWER|  SPACE |  | ENTER | RAISE| BSPC  | GUI   |

            display-name = "Base";
            bindings = <
&kp MINUS                &kp N1          &kp N2          &kp N3              &kp N4            &kp N5                                 &kp N6             &kp N7             &kp N8               &kp N9          &kp N0              &kp EQUAL
&kp GRAVE                &kp Q           &kp W           &kp E               &kp R             &kp T                                  &kp Y              &kp U              &kp I                &kp O           &kp P               &kp BACKSLASH
&mt LEFT_CONTROL ESCAPE  &lh LEFT_GUI A  &lh LEFT_ALT S  &lh LEFT_CONTROL D  &lh LEFT_SHIFT F  &kp G                                  &kp H              &rh RIGHT_SHIFT J  &rh RIGHT_CONTROL K  &rh LEFT_ALT L  &rh RIGHT_GUI SEMI  &mt RIGHT_CONTROL SINGLE_QUOTE
&kp LEFT_SHIFT           &mt LEFT_ALT Z  &kp X           &kp C               &kp V             &kp B      &kp LBKT       &kp RBKT     &lt 6 N            &kp M              &kp COMMA            &kp DOT         &mt LEFT_ALT SLASH  &kp RSHIFT
                                                         &trans              &trans            &lt 8 TAB  &lt 3 ENTER    &lt 4 SPACE  &lt_bspdel 5 BSPC  &trans             &trans
            >;
        };

        lower_layer {
            // ------------------------------------------------------------------------------------------------------------
            // | BTCLR | BT1 | BT2 |  BT3 |  BT4 |  BT5 |                   |      |       |       |      |       |       |
            // |  F1   |  F2 |  F3 |  F4  |  F5  |  F6  |                   |  F7  |  F8   |  F9   |  F10 |  F11  |  F12  |
            // |   `   |  !  |  @  |  #   |  $   |  %   |                   |  ^   |  &    |  *    |  (   |   )   |   ~   |
            // |       |     |     |      |      |      |        |  |       |      |  _    |  +    |  {   |   }   |  "|"  |
            //                     |      |      |      |        |  |       |      |       |       |

            display-name = "Lower";
            bindings = <
&bt BT_CLR  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4                    &trans     &trans     &trans           &trans    &trans    &trans
&kp F1      &kp F2        &kp F3        &kp F4        &kp F5        &kp F6                          &kp F7     &kp F8     &kp F9           &kp F10   &kp F11   &kp F12
&kp GRAVE   &kp EXCL      &kp AT        &kp HASH      &kp DOLLAR    &kp PRCNT                       &kp CARET  &kp AMPS   &kp KP_MULTIPLY  &kp LPAR  &kp RPAR  &kp TILDE
&trans      &trans        &trans        &trans        &trans        &trans        &trans    &trans  &kp EQUAL  &kp MINUS  &kp KP_PLUS      &kp LBRC  &kp RBRC  &kp PIPE
                                        &trans        &trans        &trans        &trans    &trans  &trans     &trans     &trans
            >;

            sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOL_DN>;
        };

        raise_layer {
            // ------------------------------------------------------------------------------------------------------------
            // |       |     |     |      |      |      |                   |      |       |       |      |       |       |
            // |   `   |  1  |  2  |  3   |  4   |  5   |                   |  6   |   7   |   8   |  9   |   0   |       |
            // |   F1  |  F2 |  F3 |  F4  |  F5  |  F6  |                   |      |   <-  |   v   |  ^   |  ->   |       |
            // |   F7  |  F8 |  F9 |  F10 |  F11 |  F12 |        |  |       |  +   |   -   |   =   |  [   |   ]   |   \   |
            //                     |      |      |      |        |  |       |      |       |       |

            display-name = "Raise";
            bindings = <
&trans     &trans  &trans  &trans   &trans   &trans                     &trans       &trans     &trans     &trans     &trans    &trans
&kp GRAVE  &kp N1  &kp N2  &kp N3   &kp N4   &kp N5                     &kp N6       &kp N7     &kp N8     &kp N9     &kp N0    &trans
&kp F1     &kp F2  &kp F3  &kp F4   &kp F5   &kp F6                     &kp LEFT     &kp DOWN   &kp UP     &kp RIGHT  &trans    &trans
&kp F7     &kp F8  &kp F9  &kp F10  &kp F11  &kp F12  &trans    &trans  &kp KP_PLUS  &kp MINUS  &kp EQUAL  &kp LBKT   &kp RBKT  &kp BSLH
                           &trans   &trans   &trans   &trans    &trans  &trans       &trans     &trans
            >;

            sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOL_DN>;
        };

        lmagic {
            bindings = <
&trans  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4                    &bt BT_CLR  &trans       &trans                &trans                 &trans            &bt BT_CLR_ALL
&trans  &trans        &trans        &trans        &trans        &trans                          &kp GRAVE   &trans       &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp BACKSLASH     &trans
&trans  &trans        &trans        &trans        &trans        &trans                          &kp UNDER   &kp KP_PLUS  &kp LEFT_BRACE        &kp RIGHT_BRACE        &kp SINGLE_QUOTE  &trans
&trans  &trans        &trans        &trans        &trans        &trans        &trans    &trans  &kp MINUS   &kp EQUAL    &kp LEFT_BRACKET      &kp RIGHT_BRACKET      &trans            &trans
                                    &trans        &trans        &trans        &trans    &trans  &trans      &trans       &trans
            >;
        };

        rmagic {
            bindings = <
&bt BT_CLR  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4                                     &trans          &trans          &trans        &trans           &trans  &trans
&trans      &trans        &trans        &trans        &trans        &kp SYSREQ                                       &mmv MOVE_LEFT  &mmv MOVE_DOWN  &mmv MOVE_UP  &mmv MOVE_RIGHT  &trans  &trans
&trans      &trans        &trans        &trans        &trans        &kp SCROLLLOCK                                   &kp LEFT_ARROW  &kp DOWN        &kp UP_ARROW  &kp RIGHT        &trans  &trans
&trans      &trans        &trans        &trans        &trans        &kp PRINTSCREEN  &kp LC(MINUS)    &kp LC(EQUAL)  &kp HOME        &kp PAGE_DOWN   &kp PAGE_UP   &kp END          &trans  &trans
                                        &trans        &mkp MB1      &mkp MB2         &trans           &trans         &mkp MB1        &mkp MB2        &trans
            >;
        };

        num {
            bindings = <
&trans  &trans            &trans        &trans        &trans        &trans                                  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &kp LEFT_BRACKET  &kp N7        &kp NUMBER_8  &kp N9        &kp RIGHT_BRACKET                       &trans  &trans  &trans  &trans  &trans  &trans
&trans  &kp GRAVE         &kp NUMBER_4  &kp N5        &kp N6        &kp BACKSLASH                           &trans  &trans  &trans  &trans  &trans  &trans
&trans  &kp MINUS         &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &kp SINGLE_QUOTE   &trans       &trans  &trans  &trans  &trans  &trans  &trans  &trans
                                        &trans        &kp DOT       &kp N0             &kp EQUAL    &trans  &trans  &trans  &trans
            >;
        };

        sym {
            bindings = <
&trans  &trans          &trans           &trans        &trans                &trans                                     &trans  &trans  &trans  &trans  &trans  &trans
&trans  &kp LEFT_BRACE  &kp AMPERSAND    &kp ASTERISK  &kp LEFT_PARENTHESIS  &kp RBRC                                   &trans  &trans  &trans  &trans  &trans  &trans
&trans  &kp TILDE       &kp DOLLAR       &kp PERCENT   &kp CARET             &kp PIPE                                   &trans  &trans  &trans  &trans  &trans  &trans
&trans  &kp UNDERSCORE  &kp EXCLAMATION  &kp AT_SIGN   &kp HASH              &kp DOUBLE_QUOTES      &trans      &trans  &trans  &trans  &trans  &trans  &trans  &trans
                                         &trans        &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp PLUS    &trans  &trans  &trans  &trans
            >;
        };

        func {
            bindings = <
&trans  &trans   &trans  &trans  &trans  &trans                     &trans  &trans  &trans  &trans  &trans  &trans
&trans  &kp F12  &kp F7  &kp F8  &kp F9  &kp F12                    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &kp F11  &kp F4  &kp F5  &kp F6  &kp F11                    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &kp F10  &kp F1  &kp F2  &kp F3  &kp F10  &trans    &trans  &trans  &trans  &trans  &trans  &trans  &trans
                         &trans  &trans  &trans   &trans    &trans  &trans  &trans  &trans
            >;
        };

        funcr {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans                    &trans   &trans  &trans  &trans  &trans   &trans
&trans  &trans  &trans  &trans  &trans  &trans                    &kp F12  &kp F7  &kp F8  &kp F9  &kp F12  &trans
&trans  &trans  &trans  &trans  &trans  &trans                    &kp F11  &kp F4  &kp F5  &kp F6  &kp F11  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans    &trans  &kp F10  &kp F1  &kp F2  &kp F3  &kp F10  &trans
                        &trans  &trans  &trans  &trans    &trans  &trans   &trans  &trans
            >;
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        num2sym {
            if-layers = <4 5>;
            then-layer = <6>;
        };
    };
};
